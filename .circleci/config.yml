# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/msa-backend
    docker:
      # specify the version you desire here
      - image: circleci/node:8.16.2

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      - checkout

      - run: 
          name: "Setup custom environment variables"
          command: |
              echo '{"env" : {' > nodemon.json
              echo '        "MONGO_USER" :  "'$MONGO_USER'",' >> nodemon.json
              echo '        "MONGO_PASSWORD" : "{$MONGO_PASSWORD}",' >> nodemon.json
              echo '        "MONGO_DB" : "{$MONGO_DB}",' >> nodemon.json
              echo '        "SERVER_URL": "{$SERVER_URL}", ' >> nodemon.json
              echo '        "SERVER_PORT": "{$SERVER_PORT}",' >> nodemon.json
              echo '        "URL_MOODLE": "{$URL_MOODLE}",' >> nodemon.json
              echo '        "TOKEN_MOODLE_WS": "{$TOKEN_MOODLE_WS}",' >> nodemon.json
              echo '        "LOGIN_SERVICE_MOODLE": "{$LOGIN_SERVICE_MOODLE}",' >> nodemon.json
              echo '        "SECRET_TOKEN": "{$SECRET_TOKEN}",' >> nodemon.json
              echo '        "TOKEN_EXPIRES_IN" :"{$TOKEN_EXPIRES_IN}",' >> nodemon.json
              echo '        "PUSHER_APP_ID" : "{$PUSHER_APP_ID}",' >> nodemon.json
              echo '        "PUSHER_APP_KEY" : "{$PUSHER_APP_KEY}",' >> nodemon.json
              echo '        "PUSHER_APP_SECRET" : "{$PUSHER_APP_SECRET}",' >> nodemon.json
              echo '        "PUSHER_CLUSTER" : "{$PUSHER_CLUSTER}",' >> nodemon.json
              echo '        "PUSHER_MSA_MESSAGE_CHANNEL" : "{$PUSHER_MSA_MESSAGE_CHANNEL}"' >> nodemon.json
              echo '}}' >> nodemon.json

      - run:
            name: FILE nodemon.json
            command: |
              cat nodemon.json

#       - persist_to_workspace:
#           root: ~/msa-backend
#           paths:
#             - .

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "package.json" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

#       - run: yarn install
#       - run:
#             name: check files
#             command: |
#               pwd && ls -al

#       - save_cache:
#           paths:
#             - node_modules
#           key: v1-dependencies-{{ checksum "package.json" }}
#   deploy:
#       machine:
#         enabled: true
#       working_directory: ~/msa-backend
#       steps:
#         - add_ssh_keys:
#             fingerprints:
#             - "3d:b4:07:0e:b8:7e:33:3c:da:37:db:3e:56:22:b3:4d"
#             - "0a:bf:14:0d:56:3b:9f:6f:de:4e:28:51:c4:02:72:01"
#         - attach_workspace:
#             at: ~/msa-backend

#         - run:
#             name: Stopping node 
#             command: |
#               ssh -t $SSH_USER@$SSH_HOST "bash -i -c 'echo '$SSH_PATH' && cd $SSH_PATH && ./run.sh stop'"
            
#         - run:
#             name: Removing old files 
#             command: |
#               ssh -t $SSH_USER@$SSH_HOST "rm -rf $SSH_PATH/msa-backend"

#         - run:
#             name: Deploy Over SSH 
#             command: |
#               scp -rCpv ~/msa-backend/ $SSH_USER@$SSH_HOST:$SSH_PATH/msa-backend/

#         - run:
#             name: Build over Remote Server 
#             command: |
#                 ssh -t $SSH_USER@$SSH_HOST "bash -c 'cd $SSH_PATH/msa-backend/ && rm -rf yarn.lock && npm i'"

#         - run:
#             name: Starting node 
#             command: |
#               ssh -t $SSH_USER@$SSH_HOST "bash -i -c 'echo '$SSH_PATH' && cd $SSH_PATH && ./run.sh start'"

#         - run:
#             name: check files
#             command: |
#               pwd && ls -al

#         - run:
#             name: bump package version
#             command: |
#               git config --global user.name $CIRCLE_USERNAME 
#               npm version prerelease --preid=alpha -m "Bumped version number to %s [ci skip]"
#               git push origin master
#               git push --tags

# workflows:
#   version: 2
#   build-and-deploy:
#     jobs:
#       - build
#       - deploy:
#           requires:
#             - build
#           filters:
#             branches:
#               only: master